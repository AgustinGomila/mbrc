import java.text.SimpleDateFormat

apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'


def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}
def gitHash() {
    return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

// Load the fabric api key.
def fabricApiKey = ""
def crashProperties = file('fabric.properties')

if (crashProperties.exists()) {
    def properties = new Properties()
    properties.load(new FileInputStream(crashProperties))
    fabricApiKey = properties.getAt('apiKey')
    print (fabricApiKey)
}

def hasModifiedDeletedOrOtherFiles() {
    return !"git -C ${rootDir} ls-files -mdo --exclude-standard".execute().text.trim().isEmpty()
}
def hasStagedFiles() {
    return !"git -C ${rootDir} diff-index --no-ext-diff --name-only --cached HEAD".execute().text.trim().isEmpty()
}

def dirtyWorkingCopy(){
    return hasModifiedDeletedOrOtherFiles() || hasStagedFiles()
}

def gitDescription() {
    return dirtyWorkingCopy() ? "${gitHash()}-dirty" : gitHash()
}

android {
    compileSdkVersion 22
    buildToolsVersion "22"

    defaultConfig {
        applicationId "com.kelsos.mbrc"
        minSdkVersion 8
        targetSdkVersion 22
        versionCode 97
        versionName "0.10.0.5"
        buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        manifestPlaceholders = [ fabricApiKey: fabricApiKey ]
    }

    signingConfigs {
        release {
            storeFile file('placeholder')
            keyAlias "placeholder"
            storePassword "placeholder"
            keyPassword "placeholder"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        preview {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".preview"
            versionNameSuffix "-preview"
        }
    }

     compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
        xmlReport true
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def originalFilename = output.outputFile
            def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}-${gitDescription()}"
            def filename = originalFilename.name
                    .replace(".apk", versionInfo + ".apk")
                    .replace(project.name, defaultConfig.applicationId);
            filename = "${originalFilename.parent}/${filename}"
            output.outputFile = file(filename)
            println(filename)
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:support-v4:22.0.0'
    compile 'com.android.support:support-annotations:20.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.0'
    compile 'org.roboguice:roboguice:3.0.1'
    compile 'com.squareup:otto:1.3.5'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'com.github.mrengineer13:snackbar:1.1.0'
    compile 'com.mobeta.android.dslv:drag-sort-listview:0.6.1.1@aar'
    compile 'com.github.machinarius:preferencefragment:0.1.2'
    compile 'com.afollestad:material-dialogs:0.6.3.1'
    compile 'net.i2p.android.ext:floatingactionbutton:1.8.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'io.reactivex:rxandroid:0.24.0'
    provided 'org.roboguice:roboblender:3.0.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.2@aar') {
        transitive = true;
    }
}

allprojects {
    afterEvaluate { project ->

        def signProperties = rootProject.file('signing.properties')
        if (signProperties.exists()) {
            def prop = new Properties()
            prop.load(new FileInputStream(signProperties))
            def filepath = prop.getAt("keys")
            def keyProperties = file(filepath)
            if (keyProperties.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(keyProperties))
                def keystorePath = props.getAt('keystore')
                def releaseConfig = android.signingConfigs.getAt('release')
                releaseConfig.storeFile = file(keystorePath)
                releaseConfig.storePassword = props.getAt('storePass')
                releaseConfig.keyAlias = props.getAt('keyAlias')
                releaseConfig.keyPassword = props.getAt('keyPass')
            }
        }
    }
}

project.tasks.withType(JavaCompile) { task ->
    options.compilerArgs << "-AguiceAnnotationDatabasePackageName=mbrc"
}
