import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}
def gitHash() {
    return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def hasModifiedDeletedOrOtherFiles = !"git ls-files -mdo --exclude-standard".execute().text.trim().isEmpty()
def hasStagedFiles = !"git diff-index --no-ext-diff --name-only --cached HEAD".execute().text.trim().isEmpty()
def dirtyWorkingCopy = hasModifiedDeletedOrOtherFiles || hasStagedFiles
def gitDescription = dirtyWorkingCopy ? "${gitHash()}-dirty" : gitHash()

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.kelsos.mbrc"
        minSdkVersion 8
        targetSdkVersion 21
        versionCode 96
        versionName "0.10.0.4"
        buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }

    signingConfigs {
        release {
            storeFile file('placeholder')
            keyAlias "placeholder"
            storePassword "placeholder"
            keyPassword "placeholder"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        preview {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".preview"
            versionNameSuffix "-preview"
        }
    }

     compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
        xmlReport true
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def originalFilename = output.outputFile
            def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}-${gitDescription}"
            def filename = originalFilename.name
                    .replace(".apk", versionInfo + ".apk")
                    .replace(project.name, defaultConfig.applicationId);
            filename = "${originalFilename.parent}/${filename}"
            output.outputFile = file(filename)
            println(filename)
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

dependencies {
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:support-annotations:20.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.0'
    compile 'org.roboguice:roboguice:3.0.1'
    compile 'com.squareup:otto:1.3.5'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'com.github.mrengineer13:snackbar:1.1.0'
    compile 'com.mobeta.android.dslv:drag-sort-listview:0.6.1.1@aar'
    compile 'com.github.machinarius:preferencefragment:0.1.2'
    compile 'com.afollestad:material-dialogs:0.6.3.1'
    provided 'org.roboguice:roboblender:3.0.1'
}

allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('signing.properties')
        def configName = 'release'
        if (propsFile.exists()) {
            def prop = new Properties()
            prop.load(new FileInputStream(propsFile))
            def filepath = prop['keys']
            def keyPropFile = file(filepath)
            if (keyPropFile.exists() && android.signingConfigs.hasProperty(configName)) {
                def props = new Properties()
                props.load(new FileInputStream(keyPropFile))
                def keystorePath = props['keystore']
                android.signingConfigs[configName].storeFile = file(keystorePath)
                android.signingConfigs[configName].storePassword = props['storePass']
                android.signingConfigs[configName].keyAlias = props['keyAlias']
                android.signingConfigs[configName].keyPassword = props['keyPass']
            }
        }
    }
}

project.tasks.withType(JavaCompile) { task ->
    options.compilerArgs << "-AguiceAnnotationDatabasePackageName=mbrc"
}
